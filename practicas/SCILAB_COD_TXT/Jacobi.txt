// Programa para aproximar sulución a un SEL por el método iterativo de Jacobi
// Entradas:   Iterado inicial, x0
//             Matriz del sistema, A
//             Vector independiente, b
//             Maximo número de iteraciones, maxit
//             Tolerancia, tol
// Salidas:    Solución aproximada del SEL, xk
//             Residuos. res
function [xk,res] = Jacobi(x0, A, b, maxit, tol)
  [n,m] = size(A);
  if(m~=n)
      disp('La Matriz A no es cuadrada');
      return;
  end
  
  [n1,m1] = size(b);
  if(n1~=n || m1~=1)
      disp('Medida del vector independiente no valida');
      return;
  end
  
  [n1,m1] = size(x0);
  if(n1~=n || m1~=1)
      disp('Medida del iterado inicial no valida');
      return;
  end
  
  if (rank(A)~=n | rank(A)~=m)
      disp('Sistema incompatible');
      return; 
  end
  
  D = diag(diag(A));
  Al = -tril(A,-1);
  Au = -triu(A,1);
  M = inv(D)*(Al+Au)
  roM = max(abs(spec(M)));
  if roM >= 1
    disp('El metodo no converge');
    return
  end
  
  v = inv(D)*b;
  xk = x0;  
  rk = A*xk - b; 
  Nrk = norm(rk,1);
  k = 0;
  res = [k,Nrk]';
  
  while 1,
    if(Nrk <= tol)
        return
    end
    if (k > maxit)
        return
    end    
// res(k+1) = norm(xk-sol,inf);
    res(k+1) = Nrk;
    xk = M*xk + v;
    rk = A*xk - b;
    Nrk = norm(rk,1);
    k = k+1;
  end
  
endfunction
